#pragma once

#include "kstddef"
#include "remove_reference"

namespace _KSTD
{
    namespace core
    {
        template<typename T>
        constexpr __forceinline remove_reference_t<T>&& move(T&& value) noexcept
        {
            return static_cast<remove_reference_t<T>&&>(value);
        }

        template<typename T>
        constexpr __forceinline T&& forward(remove_reference_t<T>& t) noexcept
        {
            return static_cast<T&&>(t);
        }

        template<typename T>
        constexpr __forceinline T&& forward(remove_reference_t<T>&& t) noexcept
        {
            return static_cast<T&&>(t);
        }

        template<typename T>
        add_rvalue_reference_t<T> declval() { }
    }
}