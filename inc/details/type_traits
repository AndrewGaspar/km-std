#pragma once

#include "kstddef"
#include "remove_reference"

namespace _KSTD
{
    namespace core
    {
        template<typename T> struct add_rvalue_reference { using type = T&&; };
        template<typename T> using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

        template<typename T> struct add_lvalue_reference { using type = T&; };
        template<typename T> using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

        template<typename T> struct remove_extent { using type = T; };
        template<typename T> struct remove_extent<T[]> { using type = T; };
        template<typename T, size_t N> struct remove_extent<T[N]> { using type = T; };
        template<typename T> using remove_extent_t = typename remove_extent<T>::type;
        
        template<bool B, typename T = void> struct enable_if { };
        template<typename T> struct enable_if<true, T> { using type = T; };

        template<bool B, typename T> using enable_if_t = typename enable_if<B, T>::type;

        template<typename T, T v>
        struct integral_constant
        {
            static constexpr T value = v;
            using value_type = T;
            using type = integral_constant;
            constexpr operator value_type() const noexcept { return value; }
            constexpr value_type operator()() const noexcept { return value; }
        };

        template<bool B>
        using bool_constant = integral_constant<bool, B>;

        using false_type = bool_constant<false>;
        using true_type = bool_constant<true>;

        template<typename T> struct is_array : false_type { };
        template<typename T> struct is_array<T[]> : true_type { };
        template<typename T, size_t N> struct is_array<T[N]> : true_type { };

        template<typename T, typename... Args> using is_constructible = bool_constant<__is_constructible(T, Args...)>;
        template<typename T> using is_move_constructible = is_constructible<T, add_rvalue_reference_t<T>>;

        template<typename T, typename U> using is_assignable = bool_constant<__is_assignable(T, U)>;
        template<typename T> using is_move_assignable = is_assignable<add_lvalue_reference_t<T>, add_rvalue_reference_t<T>>;

        template<typename From, typename To> using is_convertible = bool_constant<__is_convertible_to(From, To)>;

        template<bool B, typename T, typename F> struct conditional { using type = T; };
        template<typename T, typename F> struct conditional<false, T, F> { using type = F; };

        template<bool B, typename T, typename F> using conditional_t = typename conditional<B, T, F>::type;

        template<typename                      > struct is_function                                 : false_type { };

        template<typename Ret, typename... Args> struct is_function<Ret(Args...)                  > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) const            > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...)       volatile   > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) const volatile   > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...)                & > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) const          & > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...)       volatile & > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) const volatile & > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) && > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) const          &&> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...)       volatile &&> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args...) const volatile &&> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...)                  > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) const            > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...)       volatile   > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) const volatile   > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...)                 &> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) const           &> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...)       volatile  &> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) const volatile  &> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) && > : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) const          &&> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...)       volatile &&> : true_type { };
        template<typename Ret, typename... Args> struct is_function<Ret(Args..., ...) const volatile &&> : true_type { };

        template<typename T> struct remove_const { using type = T; };
        template<typename T> struct remove_const<T const> { using type = T; };
        template<typename T> using remove_const_t = typename remove_const<T>::type;

        template<typename T> struct remove_volatile { using type = T; };
        template<typename T> struct remove_volatile<T volatile> { using type = T; };
        template<typename T> using remove_volatile_t = typename remove_volatile<T>::type;

        template<typename T> using remove_cv = remove_volatile<remove_const_t<T>>;
        template<typename T> using remove_cv_t = typename remove_cv<T>::type;

        namespace details
        {
            template<typename T, bool F = false> struct add_pointer { using type = remove_reference_t<T>*; };
            template<typename T> struct add_pointer<T, true> { using type = T; };
            template<typename T, typename... Args> struct add_pointer<T(Args...), true> { using type = T(*)(Args...); };
            template<typename T, typename... Args> struct add_pointer<T(Args..., ...), true> { using type = T(*)(Args..., ...); };
        }

        template<typename T> using add_pointer = details::add_pointer<T, is_function<T>::value>;
        template<typename T> using add_pointer_t = typename add_pointer<T>::type;

        namespace details
        {
            template<typename T> using decay_rr =
                conditional<is_array<T>::value, remove_extent_t<T>*,
                    conditional_t<is_function<T>::value, add_pointer_t<T>, remove_cv_t<T>>>;
        }

        template<typename T> using decay = details::decay_rr<remove_reference_t<T>>;
        template<typename T> using decay_t = typename decay<T>::type;

        template<typename... T> struct common_type;
        template<typename T> struct common_type<T> : decay<T> { };

        template<typename T, typename U>
        struct common_type<T, U>
        {
            using type = decay_t<decltype(true ? declval<T>() : declval<U>())>;
        };

        template<typename T, typename U, typename... Rest>
        struct common_type<T, U, Rest...>
        {
            using type = typename common_type<typename common_type<T, U>::type, Rest...>::type;
        };

        template<typename... T> using common_type_t = typename common_type<T...>::type;
    }
}