#pragma once

#include "details\kstddef"
#include "details\iterator"
#include "cstddef"

namespace _KSTD
{
    using core::random_access_iterator_tag;
    struct bidrectional_iterator_tag {};
    struct forward_iterator_tag {};
    struct input_iterator_tag {};
    struct output_iterator_tag {};

    template<typename T> using iterator_traits = core::iterator_traits<T>;

    template <typename C>
    __forceinline constexpr auto begin(C& c) noexcept -> decltype(auto)
    {
        return c.begin();
    }

    template <typename C>
    __forceinline constexpr auto begin(C const& c) noexcept -> decltype(auto)
    {
        return c.begin();
    }

    template <typename T, std::size_t N>
    __forceinline constexpr T* begin(T(&array)[N]) noexcept
    {
        return array;
    }

    template <typename C>
    __forceinline constexpr auto cbegin(C const& c) noexcept -> decltype(auto)
    {
        return begin(c);
    }

    template <typename C>
    __forceinline constexpr auto end(C& c) noexcept -> decltype(auto)
    {
        return c.end();
    }

    template <typename C>
    __forceinline constexpr auto end(C const& c) noexcept -> decltype(auto)
    {
        return c.end();
    }

    template <typename T, std::size_t N>
    __forceinline constexpr T* end(T(&array)[N]) noexcept
    {
        return array + N;
    }

    template <typename C>
    __forceinline constexpr auto cend(const C& c) noexcept -> decltype(auto)
    {
        return end(c);
    }
}