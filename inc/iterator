#pragma once

#include "kstddef"
#include "cstddef"

namespace _KSTD
{
    struct bidrectional_iterator_tag {};
    struct forward_iterator_tag {};
    struct input_iterator_tag {};
    struct output_iterator_tag {};
    struct random_access_iterator_tag {};

    template <typename Iterator> 
    class iterator_traits
    {
    public:
        using difference_type = typename Iterator::difference_type;
        using value_type = typename Iterator::value_type;
        using pointer = typename Iterator::pointer;
        using reference = typename Iterator::reference;
        using iterator_category = typename Iterator::iterator_category;
    };

    template <typename T>
    class iterator_traits<T*>
    {
    public:
        using difference_type = ptrdiff_t;
        using value_type = T;
        using pointer = T*;
        using reference = T&;
        using iterator_category = random_access_iterator_tag;
    };

    template <typename T>
    class iterator_traits<T const *>
    {
    public:
        using difference_type = ptrdiff_t;
        using value_type = T;
        using pointer = T const *;
        using reference = T const &;
        using iterator_category = random_access_iterator_tag;
    };

    template <typename C>
    __forceinline constexpr auto begin(C& c) noexcept -> decltype(auto)
    {
        return c.begin();
    }

    template <typename C>
    __forceinline constexpr auto begin(C const& c) noexcept -> decltype(auto)
    {
        return c.begin();
    }

    template <typename T, std::size_t N>
    __forceinline constexpr T* begin(T(&array)[N]) noexcept
    {
        return array;
    }

    template <typename C>
    __forceinline constexpr auto cbegin(C const& c) noexcept -> decltype(auto)
    {
        return begin(c);
    }

    template <typename C>
    __forceinline constexpr auto end(C& c) noexcept -> decltype(auto)
    {
        return c.end();
    }

    template <typename C>
    __forceinline constexpr auto end(C const& c) noexcept -> decltype(auto)
    {
        return c.end();
    }

    template <typename T, std::size_t N>
    __forceinline constexpr T* end(T(&array)[N]) noexcept
    {
        return array + N;
    }

    template <typename C>
    __forceinline constexpr auto cend(const C& c) noexcept -> decltype(auto)
    {
        return end(c);
    }
}